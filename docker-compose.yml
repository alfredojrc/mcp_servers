version: '3.8'

services:
  # Master MCP Orchestrator - Port 8000
  00_master_mcp:
    build:
      context: ./00_master_mcp
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - PYTHONUNBUFFERED=1
    networks:
      - mcp-network
    depends_on:
      - 01_documentation_mcp
      - 02_cmdb_mcp
      - 03_secrets_mcp
      - 04_ai_models_mcp
      - 05_vector_db_mcp

  # Documentation MCP Service - Port 8001 (previously 8011)
  01_documentation_mcp:
    build:
      context: ./01_documentation_mcp
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - MCP_PORT=8001
      - SEARCH_INDEX_PATH=/app/search_index
      - STATIC_PATH=/app/static
    volumes:
      - ./01_documentation_mcp/docs:/app/docs:ro
      - ./01_documentation_mcp/search_index:/app/search_index
      - ./01_documentation_mcp/static:/app/static:ro
    networks:
      - mcp-network

  # CMDB MCP Service - Port 8002 (previously 8012)
  02_cmdb_mcp:
    build:
      context: ./02_cmdb_mcp
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      - MCP_PORT=8002
      - CMDB_FILE=/app/data/cmdb.csv
    volumes:
      - ./02_cmdb_mcp/data:/app/data
    networks:
      - mcp-network

  # Secrets MCP Service - Port 8003 (previously 8013)
  03_secrets_mcp:
    build:
      context: ./03_secrets_mcp
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    environment:
      - MCP_PORT=8003
      - KEEPASS_DB_PATH=/secrets/keepass/Passwords.kdbx
      - KEEPASS_MASTER_PASSWORD_FILE=/secrets/keepass_master_password.txt
    volumes:
      - ./secrets:/secrets:ro
    networks:
      - mcp-network

  # AI Models MCP Service - Port 8004 (previously 8016)
  04_ai_models_mcp:
    build:
      context: ./04_ai_models_mcp
      dockerfile: Dockerfile
    ports:
      - "8004:8004"
    environment:
      - MCP_PORT=8004
      - GEMINI_API_KEY_FILE=/secrets/gemini_api_key.txt
      - ANTHROPIC_API_KEY_FILE=/secrets/anthropic_api_key.txt
    volumes:
      - ./secrets:/secrets:ro
    networks:
      - mcp-network

  # Vector DB MCP Service - Port 8005 (previously 8018)
  05_vector_db_mcp:
    build:
      context: ./05_vector_db_mcp
      dockerfile: Dockerfile
    ports:
      - "8005:8005"
    environment:
      - MCP_PORT=8005
      - CHROMA_DB_PATH=/data/chroma
      - EMBEDDING_MODEL=all-MiniLM-L6-v2
    volumes:
      - ./05_vector_db_mcp/data:/data
    networks:
      - mcp-network

  # Monitoring Services (Optional - kept for observability)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - mcp-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - mcp-network

  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki/loki-config.yml:/etc/loki/loki-config.yml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/loki-config.yml
    networks:
      - mcp-network

  promtail:
    image: grafana/promtail:latest
    volumes:
      - ./monitoring/promtail/promtail-config.yml:/etc/promtail/promtail-config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/promtail-config.yml
    networks:
      - mcp-network

networks:
  mcp-network:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data:
  loki_data: