services:
  00_master_mcp:
    build:
      context: ./00_master_mcp
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - MCP_PORT=5000
    volumes:
      - ./secrets:/secrets:ro
    networks:
      - mcp-network
    restart: unless-stopped

  08_k8s_mcp:
    build:
      context: ./08_k8s_mcp
      dockerfile: Dockerfile
    privileged: true
    volumes:
      - ./08_k8s_mcp/.WebControl:/root/.WebControl
      - /var/run/docker.sock:/var/run/docker.sock
      - ./08_k8s_mcp:/workspace
      - ~/.kube:/root/.kube
    ports:
      - "5008:5008"
    environment:
      - PYTHONUNBUFFERED=1
      - FLASK_APP=main.py
      - FLASK_ENV=development
      - WEBCONTROL_PORT=5008
      - WEBCONTROL_AUTO_START=true
      - WEBCONTROL_WAIT_TIME=30
      - MCP_PORT=5008
    restart: unless-stopped
    networks:
      - mcp-network
    cap_add:
      - SYS_ADMIN
    security_opt:
      - seccomp:unconfined
    user: root

  01_linux_cli_mcp:
    build:
      context: ./01_linux_cli_mcp
      dockerfile: Dockerfile
    ports:
      - "5001:5001"
    environment:
      - MCP_PORT=5001
      # TODO: Define allowed commands and paths based on security needs
      - ALLOWED_COMMANDS=ls,cat,grep,ps,df,echo,stat,head,tail,find # Example safe commands
      - ALLOWED_READ_PATHS=/etc:/var/log:/tmp:/home # Example read paths
      - ALLOWED_WRITE_PATHS=/tmp # Example write path
      # Uncomment and configure if using SSH to remote hosts:
      # - SSH_HOSTS=host1.example.com,host2.example.com
      # - SSH_USER=your_ssh_user
      # - SSH_KEY_SECRET_PATH=/secrets/linux_ssh_key # Path inside container to SSH private key
    volumes:
      # Mount secrets read-only
      - ./secrets:/secrets:ro
      # Example: If managing Docker host, mount socket (requires privileged=true)
      # - /var/run/docker.sock:/var/run/docker.sock
      # Example: If managing remote hosts via SSH key
      # - ./secrets/linux_ssh_key:/secrets/linux_ssh_key:ro
    networks:
      - mcp-network
    restart: unless-stopped
    # Add privileged: true ONLY if managing the Docker host via socket mount
    # privileged: true 

  13_secrets_mcp:
    build:
      context: ./13_secrets_mcp
      dockerfile: Dockerfile
    ports:
      - "5013:5013"
    environment:
      - MCP_PORT=5013
      # --- Backend Configuration - Enable and configure as needed --- 
      # KeePass:
      - KEEPASS_DB_PATH=/secrets/keepass/MySecrets.kdbx # Path inside container
      - KEEPASS_PASSWORD_SECRET_PATH=/run/secrets/keepass_master_password # Path to Docker secret file
      # - KEEPASS_KEYFILE_PATH=/secrets/keepass/MyKey.key # Optional key file path inside container
      
      # Azure Key Vault (uses DefaultAzureCredential - configure one method):
      # Option 1: Service Principal Env Vars (Secret mounted separately)
      - AZURE_VAULT_URL=https://your-vault-name.vault.azure.net
      - AZURE_CLIENT_ID=your-sp-client-id
      - AZURE_TENANT_ID=your-tenant-id
      - AZURE_CLIENT_SECRET_SECRET_PATH=/run/secrets/azure_sp_secret # Path to Docker secret file for SP secret
      # Option 2: Managed Identity (If running in Azure)
      # AZURE_VAULT_URL=https://your-vault-name.vault.azure.net
      
      # Google Secret Manager (uses Application Default Credentials - configure one method):
      # Option 1: Service Account Key File (Mounted via volume/secret)
      - GCP_PROJECT_ID=your-gcp-project-id
      - GOOGLE_APPLICATION_CREDENTIALS=/secrets/gcp/gcp-sa-key.json # Path inside container
      # Option 2: Workload Identity (If running in GKE/Cloud Run)
      # GCP_PROJECT_ID=your-gcp-project-id
      
    volumes:
      # Mount secrets read-only
      - ./secrets:/secrets:ro 
      # Example: Mount KeePass DB read-only (adjust host path)
      # - ./path/to/your/MySecrets.kdbx:/secrets/keepass/MySecrets.kdbx:ro 
      # Example: Mount GCP Service Account key read-only (adjust host path)
      # - ./path/to/your/gcp-sa-key.json:/secrets/gcp/gcp-sa-key.json:ro
      # Example: Mount KeePass key file if used
      # - ./path/to/your/MyKey.key:/secrets/keepass/MyKey.key:ro
    secrets:
      # Define Docker secrets (these must exist or be defined below)
      - keepass_master_password
      - azure_sp_secret
    networks:
      - mcp-network
    restart: unless-stopped

  12_cmdb_mcp:
    build:
      context: ./12_cmdb_mcp
      dockerfile: Dockerfile
    ports:
      - "5012:5012"
    environment:
      - MCP_PORT=5012
      # --- Backend Configuration - Enable and configure as needed ---
      # Local CMDB (Example: CSV)
      - LOCAL_CMDB_PATH=/data/cmdb.csv # Path inside container
      
      # ServiceNow:
      - SERVICENOW_INSTANCE=your-instance-name # e.g., yourcompany.service-now.com
      - SERVICENOW_USER=api_user
      - SERVICENOW_PASSWORD_SECRET_PATH=/run/secrets/servicenow_password
      
    volumes:
      # Mount secrets read-only
      - ./secrets:/secrets:ro 
      # Example: Mount local CMDB data (e.g., a CSV file or SQLite DB)
      - ./12_cmdb_mcp/data:/data # Mount host data dir to /data in container
    secrets:
      # Define Docker secrets (these must exist or be defined below)
      - servicenow_password
    networks:
      - mcp-network
    restart: unless-stopped

  # --- Monitoring Stack ---
  prometheus:
    image: prom/prometheus:v2.53.0 # Use a specific stable version
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle' # Allows config reload via HTTP POST
    networks:
      - mcp-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:11.1.3 # Use a specific stable version
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      # Optional: Mount provisioning directory for auto-config
      # - ./monitoring/grafana/provisioning/:/etc/grafana/provisioning/
    environment:
      # Optional: set admin user/password (use Grafana UI for first login if unset)
      # - GF_SECURITY_ADMIN_USER=admin
      # - GF_SECURITY_ADMIN_PASSWORD=your_secure_password
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - mcp-network
    restart: unless-stopped

  loki:
    image: grafana/loki:3.1.0 # Use a specific stable version
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - mcp-network
    restart: unless-stopped

  promtail:
    image: grafana/promtail:3.1.0 # Use a specific stable version
    container_name: promtail
    volumes:
      - ./monitoring/promtail/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro # To discover containers and read logs
      - promtail_data:/var/lib/promtail/positions # To remember log positions
      # Optional: If containers write logs to files instead of stdout
      # - /var/log/pods:/var/log/pods:ro 
    command: -config.file=/etc/promtail/config.yml
    networks:
      - mcp-network
    restart: unless-stopped

networks:
  mcp-network:
    driver: bridge

# Define Docker secrets here if not managed externally
# secrets:
#   keepass_master_password:
#     file: ./path/to/keepass_password.txt # Local file containing the password
#   azure_sp_secret:
#     file: ./path/to/azure_sp_secret.txt 

# Define persistent volumes for monitoring data
volumes:
  prometheus_data:
  grafana_data:
  loki_data:
  promtail_data: 