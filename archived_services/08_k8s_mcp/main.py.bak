"""
Kubernetes MCP (Mesh Configuration Protocol) server.

This server provides access to Kubernetes documentation, APIs, and references.
It also provides functionality to interact with a Kubernetes cluster.
"""
import os
import json
import logging
from logging.handlers import RotatingFileHandler
from flask import Flask, jsonify, request, send_from_directory, render_template
from dotenv import load_dotenv
import requests
import markdown
from bs4 import BeautifulSoup
import yaml
from templates import get_template, list_templates, save_templates
from k8s_client import get_k8s_client

# Load environment variables
load_dotenv()

# Setup logging
if not os.path.exists('logs'):
    os.makedirs('logs')

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
handler = RotatingFileHandler('logs/k8s_mcp.log', maxBytes=10485760, backupCount=5)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)

# Initialize Flask app
app = Flask(__name__, static_folder='static')

# Create directories for Kubernetes documentation
os.makedirs('static/docs', exist_ok=True)
os.makedirs('static/api', exist_ok=True)
os.makedirs('static/templates', exist_ok=True)

# URLs for Kubernetes documentation
K8S_DOCS_URL = "https://kubernetes.io/docs"
K8S_API_URL = "https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.27/"

# Initialize Kubernetes client
try:
    k8s_client = get_k8s_client()
    k8s_enabled = True
    logger.info("Kubernetes client initialized successfully")
except Exception as e:
    k8s_enabled = False
    logger.error(f"Failed to initialize Kubernetes client: {str(e)}")

def fetch_k8s_docs() -> None:
    """
    Fetch Kubernetes documentation from the official website.
    """
    try:
        # Fetch main documentation index
        response = requests.get(f"{K8S_DOCS_URL}/home/")
        if response.status_code == 200:
            with open('static/docs/index.html', 'w') as f:
                f.write(response.text)
            logger.info("Downloaded K8s documentation index")
            
        # Fetch API reference
        api_response = requests.get(K8S_API_URL)
        if api_response.status_code == 200:
            with open('static/api/index.html', 'w') as f:
                f.write(api_response.text)
            logger.info("Downloaded K8s API reference")
                
    except Exception as e:
        logger.error(f"Error fetching K8s docs: {str(e)}")

@app.route('/')
def index() -> str:
    """
    Main endpoint to check if the server is running.
    """
    return jsonify({
        "status": "running",
        "service": "Kubernetes MCP Server",
        "k8s_enabled": k8s_enabled,
        "endpoints": {
            "docs": "/docs",
            "api": "/api",
            "status": "/status",
            "templates": "/templates",
            "search": "/search?q=<query>",
            "cluster": "/cluster" if k8s_enabled else None
        }
    })

@app.route('/docs')
def docs() -> str:
    """
    Serve Kubernetes documentation.
    """
    if not os.path.exists('static/docs/index.html'):
        fetch_k8s_docs()
    return send_from_directory('static/docs', 'index.html')

@app.route('/api')
def api() -> str:
    """
    Serve Kubernetes API reference.
    """
    if not os.path.exists('static/api/index.html'):
        fetch_k8s_docs()
    return send_from_directory('static/api', 'index.html')

@app.route('/status')
def status() -> str:
    """
    Return server status and information.
    """
    return jsonify({
        "status": "healthy",
        "version": "1.0.0",
        "docs_available": os.path.exists('static/docs/index.html'),
        "api_available": os.path.exists('static/api/index.html'),
        "templates_available": os.path.exists('static/templates'),
        "k8s_enabled": k8s_enabled
    })

@app.route('/search')
def search() -> str:
    """
    Search Kubernetes documentation.
    """
    query = request.args.get('q', '')
    if not query:
        return jsonify({"error": "No search query provided"}), 400
    
    # Simple search implementation
    results = []
    
    # Search in docs
    if os.path.exists('static/docs/index.html'):
        with open('static/docs/index.html', 'r') as f:
            content = f.read()
            soup = BeautifulSoup(content, 'html.parser')
            for link in soup.find_all('a'):
                if query.lower() in link.text.lower():
                    results.append({
                        "title": link.text,
                        "url": link.get('href'),
                        "source": "docs"
                    })
    
    # Search in API reference
    if os.path.exists('static/api/index.html'):
        with open('static/api/index.html', 'r') as f:
            content = f.read()
            soup = BeautifulSoup(content, 'html.parser')
            for link in soup.find_all('a'):
                if query.lower() in link.text.lower():
                    results.append({
                        "title": link.text,
                        "url": link.get('href'),
                        "source": "api"
                    })
    
    return jsonify({"query": query, "results": results})

@app.route('/templates')
def templates() -> str:
    """
    List all available Kubernetes resource templates.
    """
    template_list = list_templates()
    return jsonify({
        "templates": template_list,
        "usage": "GET /templates/<template_name>?format=yaml|json"
    })

@app.route('/templates/<template_name>')
def template(template_name: str) -> str:
    """
    Retrieve a specific Kubernetes resource template.
    
    Args:
        template_name: The name of the template to retrieve
    """
    format_type = request.args.get('format', 'yaml')
    if format_type not in ['yaml', 'json']:
        return jsonify({"error": "Invalid format. Use 'yaml' or 'json'"}), 400
    
    template_content = get_template(template_name, format_type)
    
    if template_content is None:
        return jsonify({
            "error": f"Template '{template_name}' not found",
            "available_templates": list_templates()
        }), 404
    
    if format_type == 'json':
        return jsonify(json.loads(template_content))
    else:
        return template_content, 200, {'Content-Type': 'text/yaml'}

# Kubernetes Cluster API endpoints

@app.route('/cluster')
def cluster() -> str:
    """
    Get cluster information.
    """
    if not k8s_enabled:
        return jsonify({"error": "Kubernetes integration is not enabled"}), 503
    
    try:
        current_context = k8s_client.get_current_context()
        return jsonify({
            "status": "connected",
            "current_context": current_context,
            "endpoints": {
                "contexts": "/cluster/contexts",
                "namespaces": "/cluster/namespaces",
                "pods": "/cluster/pods",
                "services": "/cluster/services",
                "deployments": "/cluster/deployments"
            }
        })
    except Exception as e:
        logger.error(f"Error getting cluster info: {str(e)}")
        return jsonify({
            "status": "error",
            "message": str(e)
        }), 500

@app.route('/cluster/contexts')
def get_contexts() -> str:
    """
    Get all available Kubernetes contexts.
    """
    if not k8s_enabled:
        return jsonify({"error": "Kubernetes integration is not enabled"}), 503
    
    try:
        contexts = k8s_client.get_contexts()
        current_context = k8s_client.get_current_context()
        return jsonify({
            "current_context": current_context.get("name", ""),
            "contexts": contexts
        })
    except Exception as e:
        logger.error(f"Error getting contexts: {str(e)}")
        return jsonify({
            "status": "error",
            "message": str(e)
        }), 500

@app.route('/cluster/namespaces')
def list_namespaces() -> str:
    """
    List all namespaces in the cluster.
    """
    if not k8s_enabled:
        return jsonify({"error": "Kubernetes integration is not enabled"}), 503
    
    try:
        namespaces = k8s_client.list_namespaces()
        return jsonify({
            "namespaces": namespaces
        })
    except Exception as e:
        logger.error(f"Error listing namespaces: {str(e)}")
        return jsonify({
            "status": "error",
            "message": str(e)
        }), 500

@app.route('/cluster/pods')
def list_pods() -> str:
    """
    List all pods in the cluster or in a specific namespace.
    """
    if not k8s_enabled:
        return jsonify({"error": "Kubernetes integration is not enabled"}), 503
    
    namespace = request.args.get('namespace')
    
    try:
        pods = k8s_client.list_pods(namespace=namespace)
        return jsonify({
            "namespace": namespace if namespace else "all",
            "pods": pods
        })
    except Exception as e:
        logger.error(f"Error listing pods: {str(e)}")
        return jsonify({
            "status": "error",
            "message": str(e)
        }), 500

@app.route('/cluster/pod/<namespace>/<name>')
def get_pod(namespace: str, name: str) -> str:
    """
    Get details of a specific pod.
    
    Args:
        namespace: The namespace of the pod
        name: The name of the pod
    """
    if not k8s_enabled:
        return jsonify({"error": "Kubernetes integration is not enabled"}), 503
    
    try:
        pod = k8s_client.get_pod(name=name, namespace=namespace)
        return jsonify(pod)
    except Exception as e:
        logger.error(f"Error getting pod {name} in namespace {namespace}: {str(e)}")
        return jsonify({
            "status": "error",
            "message": str(e)
        }), 500

@app.route('/cluster/pod/<namespace>/<name>/logs')
def get_pod_logs(namespace: str, name: str) -> str:
    """
    Get logs from a specific pod.
    
    Args:
        namespace: The namespace of the pod
        name: The name of the pod
    """
    if not k8s_enabled:
        return jsonify({"error": "Kubernetes integration is not enabled"}), 503
    
    container = request.args.get('container')
    tail_lines = request.args.get('tail_lines')
    if tail_lines:
        try:
            tail_lines = int(tail_lines)
        except ValueError:
            return jsonify({"error": "tail_lines must be an integer"}), 400
    
    try:
        logs = k8s_client.get_pod_logs(
            name=name, 
            namespace=namespace, 
            container=container,
            tail_lines=tail_lines
        )
        return jsonify(logs)
    except Exception as e:
        logger.error(f"Error getting logs for pod {name} in namespace {namespace}: {str(e)}")
        return jsonify({
            "status": "error",
            "message": str(e)
        }), 500

@app.route('/cluster/services')
def list_services() -> str:
    """
    List all services in the cluster or in a specific namespace.
    """
    if not k8s_enabled:
        return jsonify({"error": "Kubernetes integration is not enabled"}), 503
    
    namespace = request.args.get('namespace')
    
    try:
        services = k8s_client.list_services(namespace=namespace)
        return jsonify({
            "namespace": namespace if namespace else "all",
            "services": services
        })
    except Exception as e:
        logger.error(f"Error listing services: {str(e)}")
        return jsonify({
            "status": "error",
            "message": str(e)
        }), 500

@app.route('/cluster/deployments')
def list_deployments() -> str:
    """
    List all deployments in the cluster or in a specific namespace.
    """
    if not k8s_enabled:
        return jsonify({"error": "Kubernetes integration is not enabled"}), 503
    
    namespace = request.args.get('namespace')
    
    try:
        deployments = k8s_client.list_deployments(namespace=namespace)
        return jsonify({
            "namespace": namespace if namespace else "all",
            "deployments": deployments
        })
    except Exception as e:
        logger.error(f"Error listing deployments: {str(e)}")
        return jsonify({
            "status": "error",
            "message": str(e)
        }), 500

@app.route('/cluster/apply', methods=['POST'])
def apply_yaml() -> str:
    """
    Apply a YAML manifest to the cluster.
    """
    if not k8s_enabled:
        return jsonify({"error": "Kubernetes integration is not enabled"}), 503
    
    if not request.is_json and not request.files:
        return jsonify({"error": "Request must contain a JSON payload or a YAML file"}), 400
    
    namespace = request.args.get('namespace')
    
    try:
        if request.is_json:
            # Handle JSON payload
            payload = request.json
            
            if 'yaml' not in payload:
                return jsonify({"error": "JSON payload must contain a 'yaml' field"}), 400
            
            yaml_content = payload['yaml']
        else:
            # Handle file upload
            if 'file' not in request.files:
                return jsonify({"error": "No file part in the request"}), 400
            
            file = request.files['file']
            if file.filename == '':
                return jsonify({"error": "No selected file"}), 400
            
            yaml_content = file.read().decode('utf-8')
        
        result = k8s_client.apply_yaml(yaml_content=yaml_content, namespace=namespace)
        return jsonify(result)
    except Exception as e:
        logger.error(f"Error applying YAML: {str(e)}")
        return jsonify({
            "status": "error",
            "message": str(e)
        }), 500

@app.route('/cluster/pod/<namespace>/<name>', methods=['DELETE'])
def delete_pod(namespace: str, name: str) -> str:
    """
    Delete a specific pod.
    
    Args:
        namespace: The namespace of the pod
        name: The name of the pod
    """
    if not k8s_enabled:
        return jsonify({"error": "Kubernetes integration is not enabled"}), 503
    
    try:
        result = k8s_client.delete_pod(name=name, namespace=namespace)
        return jsonify(result)
    except Exception as e:
        logger.error(f"Error deleting pod {name} in namespace {namespace}: {str(e)}")
        return jsonify({
            "status": "error",
            "message": str(e)
        }), 500

@app.route('/cluster/pod/<namespace>/<name>/exec', methods=['POST'])
def exec_command(namespace: str, name: str) -> str:
    """
    Execute a command in a container of a pod.
    
    Args:
        namespace: The namespace of the pod
        name: The name of the pod
    """
    if not k8s_enabled:
        return jsonify({"error": "Kubernetes integration is not enabled"}), 503
    
    if not request.is_json:
        return jsonify({"error": "Request must contain a JSON payload"}), 400
    
    payload = request.json
    container = payload.get('container')
    command = payload.get('command')
    
    if not command:
        return jsonify({"error": "Command is required"}), 400
    
    try:
        result = k8s_client.exec_command(
            name=name,
            namespace=namespace,
            container=container,
            command=command
        )
        return jsonify(result)
    except Exception as e:
        logger.error(f"Error executing command in pod {name} in namespace {namespace}: {str(e)}")
        return jsonify({
            "status": "error",
            "message": str(e)
        }), 500

@app.route('/cluster/describe/<kind>/<name>')
def describe_resource(kind: str, name: str) -> str:
    """
    Describe a Kubernetes resource.
    
    Args:
        kind: The kind of resource (pod, service, deployment, etc.)
        name: The name of the resource
    """
    if not k8s_enabled:
        return jsonify({"error": "Kubernetes integration is not enabled"}), 503
    
    namespace = request.args.get('namespace')
    
    try:
        result = k8s_client.describe_resource(
            kind=kind,
            name=name,
            namespace=namespace
        )
        return jsonify(result)
    except Exception as e:
        logger.error(f"Error describing {kind} {name}: {str(e)}")
        return jsonify({
            "status": "error",
            "message": str(e)
        }), 500

@app.route('/cluster/create/pod', methods=['POST'])
def create_pod() -> str:
    """
    Create a pod in a namespace.
    """
    if not k8s_enabled:
        return jsonify({"error": "Kubernetes integration is not enabled"}), 503
    
    if not request.is_json:
        return jsonify({"error": "Request must contain a JSON payload"}), 400
    
    payload = request.json
    
    if 'namespace' not in payload:
        return jsonify({"error": "Namespace is required"}), 400
    
    if 'pod' not in payload:
        return jsonify({"error": "Pod manifest is required"}), 400
    
    try:
        result = k8s_client.create_pod(
            pod_manifest=payload['pod'],
            namespace=payload['namespace']
        )
        return jsonify(result)
    except Exception as e:
        logger.error(f"Error creating pod: {str(e)}")
        return jsonify({
            "status": "error",
            "message": str(e)
        }), 500

if __name__ == '__main__':
    # Initial fetch of documentation
    fetch_k8s_docs()
    
    # Save templates
    save_templates()
    
    # Start Flask server
    port = int(os.environ.get('WEBCONTROL_PORT', 5001))
    app.run(host='0.0.0.0', port=port, debug=True) 