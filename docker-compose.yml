services:
  00_master_mcp:
    build:
      context: ./00_master_mcp
      dockerfile: Dockerfile
    ports:
      - "${MCP_PORT_00:-8000}:8000"
    environment:
      - MCP_PORT=8000
      # Environment variables for proxied service URLs
      - MCP_PORT_01=${MCP_PORT_01:-8001}       # For 01_linux_cli_mcp
      - MCP_PORT_08_K8S=${MCP_PORT_08_K8S:-8008} # For 08_k8s_mcp (runs on 8008)
      - MCP_PORT_12=${MCP_PORT_12:-8012}       # For 12_cmdb_mcp
      - MCP_PORT_13=${MCP_PORT_13:-8013}       # For 13_secrets_mcp
      - MCP_PORT_15=${MCP_PORT_15:-8015}       # For 15_freqtrade_mcp
    volumes:
      - ./secrets:/secrets:ro
    networks:
      - mcp-network
    restart: unless-stopped
    depends_on:
      - 01_linux_cli_mcp
      - 08_k8s_mcp
      - 12_cmdb_mcp
      - 13_secrets_mcp
      - 15_freqtrade_mcp

  08_k8s_mcp:
    build:
      context: ./08_k8s_mcp
      dockerfile: Dockerfile
    privileged: true
    volumes:
      - ./08_k8s_mcp/.WebControl:/root/.WebControl
      - /var/run/docker.sock:/var/run/docker.sock
      - ./08_k8s_mcp:/workspace
      - ~/.kube:/root/.kube
    ports:
      - "8008:8008"
    environment:
      - PYTHONUNBUFFERED=1
      - FLASK_APP=main.py
      - FLASK_ENV=development
      - WEBCONTROL_PORT=8008
      - WEBCONTROL_AUTO_START=true
      - WEBCONTROL_WAIT_TIME=30
      - MCP_PORT=8008
    restart: unless-stopped
    networks:
      - mcp-network
    cap_add:
      - SYS_ADMIN
    security_opt:
      - seccomp:unconfined
    user: root

  01_linux_cli_mcp:
    build:
      context: ./01_linux_cli_mcp
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - MCP_PORT=8001
      # TODO: Define allowed commands and paths based on security needs
      - ALLOWED_COMMANDS=ls,cat,grep,ps,df,echo,stat,head,tail,find,ssh # Example safe commands, added ssh
      - ALLOWED_READ_PATHS=/etc:/var/log:/tmp:/home # Example read paths
      - ALLOWED_WRITE_PATHS=/tmp # Example write path
      # Configure SSH to aicrusher:
      - SSH_HOSTS=aicrusher # Add other hosts comma-separated if needed
      - SSH_USER=jeriko
      - SSH_KEY_SECRET_PATH=/secrets/aicrusher_jeriko_id_rsa # Path inside container to SSH private key
    volumes:
      # Mount secrets read-only
      - ./secrets:/secrets:ro
      # Mount SSH private key for aicrusher
      - ./secrets/aicrusher_jeriko_id_rsa:/secrets/aicrusher_jeriko_id_rsa:ro
      # Example: If managing Docker host, mount socket (requires privileged=true)
      # - /var/run/docker.sock:/var/run/docker.sock
      # Example: If managing remote hosts via SSH key
      # - ./secrets/linux_ssh_key:/secrets/linux_ssh_key:ro
    networks:
      - mcp-network
    restart: unless-stopped
    # Add privileged: true ONLY if managing the Docker host via socket mount
    # privileged: true 

  13_secrets_mcp:
    build:
      context: ./13_secrets_mcp
      dockerfile: Dockerfile
    ports:
      - "8013:8013"
    environment:
      - MCP_PORT=8013
      # --- Backend Configuration - Enable and configure as needed --- 
      # KeePass:
      - KEEPASS_DB_PATH=/secrets/keepass/mcp_secrets.kdbx # Path inside container
      - KEEPASS_PASSWORD_SECRET_PATH=/run/secrets/keepass_master_password # Path to Docker secret file
      # - KEEPASS_KEYFILE_PATH=/secrets/keepass/MyKey.key # Optional key file path inside container
      
      # Azure Key Vault (uses DefaultAzureCredential - configure one method):
      # Option 1: Service Principal Env Vars (Secret mounted separately)
      - AZURE_VAULT_URL=https://your-vault-name.vault.azure.net
      - AZURE_CLIENT_ID=your-sp-client-id
      - AZURE_TENANT_ID=your-tenant-id
      - AZURE_CLIENT_SECRET_SECRET_PATH=/run/secrets/azure_sp_secret # Path to Docker secret file for SP secret
      # Option 2: Managed Identity (If running in Azure)
      # AZURE_VAULT_URL=https://your-vault-name.vault.azure.net
      
      # Google Secret Manager (uses Application Default Credentials - configure one method):
      # Option 1: Service Account Key File (Mounted via volume/secret)
      # - GCP_PROJECT_ID=your-gcp-project-id # Commented out
      # - GOOGLE_APPLICATION_CREDENTIALS=/secrets/gcp/gcp-sa-key.json # Commented out
      # Option 2: Workload Identity (If running in GKE/Cloud Run)
      # GCP_PROJECT_ID=your-gcp-project-id
      
    volumes:
      # Mount secrets read-only
      - ./secrets:/secrets:ro 
      # Example: Mount KeePass DB read-only (adjust host path)
      - ./secrets/keepass/mcp_secrets.kdbx:/secrets/keepass/mcp_secrets.kdbx:ro 
      # Example: Mount GCP Service Account key read-only (adjust host path)
      # - ./path/to/your/gcp-sa-key.json:/secrets/gcp/gcp-sa-key.json:ro
      # Example: Mount KeePass key file if used
      # - ./path/to/your/MyKey.key:/secrets/keepass/MyKey.key:ro
    secrets: 
      # Define Docker secrets (these must exist or be defined below)
      - keepass_master_password
      # - azure_sp_secret
    networks:
      - mcp-network
    restart: unless-stopped

  12_cmdb_mcp:
    build:
      context: ./12_cmdb_mcp
      dockerfile: Dockerfile
    ports:
      - "8012:8012"
    environment:
      - MCP_PORT=8012
      # --- Backend Configuration - Enable and configure as needed ---
      # Local CMDB (Example: CSV)
      - LOCAL_CMDB_PATH=/data/cmdb.csv # Path inside container
      
      # ServiceNow:
      - SERVICENOW_INSTANCE=your-instance-name # e.g., yourcompany.service-now.com
      - SERVICENOW_USER=api_user
      - SERVICENOW_PASSWORD_SECRET_PATH=/run/secrets/servicenow_password
      
    volumes:
      # Mount secrets read-only
      - ./secrets:/secrets:ro 
      # Example: Mount local CMDB data (e.g., a CSV file or SQLite DB)
      - ./12_cmdb_mcp/data:/data # Mount host data dir to /data in container
    # secrets: # Temporarily comment out until secrets are defined
    #   # Define Docker secrets (these must exist or be defined below)
    #   - servicenow_password
    networks:
      - mcp-network
    restart: unless-stopped

  14_aider_mcp:
    build:
      context: ./14_aider_mcp
      dockerfile: Dockerfile
    ports:
      - "8014:8014"
    environment:
      - MCP_PORT=8014
      - REPO_PATH=/workspace # Aider will operate on files in this path inside the container
      # - OPENAI_API_KEY=${OPENAI_API_KEY:-your_openai_api_key_here} # Uncomment and set if needed by Aider
      # - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-your_anthropic_api_key_here} # Uncomment and set if needed by Aider
      # - AIDER_MCP_VERBOSE=true # Uncomment for verbose logging from aider-mcp server
    volumes:
      # Mount a host directory into the container for Aider to access and modify files.
      # Example: Mount the entire project directory ('.') to /workspace
      - .:/workspace 
      # If Aider needs git, ensure .git is accessible or init a repo in /workspace
      # You might want to mount your ~/.gitconfig if aider needs it:
      # - ~/.gitconfig:/root/.gitconfig:ro 
      # Mount secrets if needed, e.g., for API keys if not passed via environment
      - ./secrets:/secrets:ro 
    networks:
      - mcp-network
    restart: unless-stopped

  # --- Monitoring Stack ---
  prometheus:
    image: prom/prometheus:v2.53.0 # Use a specific stable version
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle' # Allows config reload via HTTP POST
    networks:
      - mcp-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:11.1.3 # Use a specific stable version
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      # Optional: Mount provisioning directory for auto-config
      # - ./monitoring/grafana/provisioning/:/etc/grafana/provisioning/
    environment:
      # Optional: set admin user/password (use Grafana UI for first login if unset)
      # - GF_SECURITY_ADMIN_USER=admin
      # - GF_SECURITY_ADMIN_PASSWORD=your_secure_password
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - mcp-network
    restart: unless-stopped

  loki:
    image: grafana/loki:3.1.0 # Use a specific stable version
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - mcp-network
    restart: unless-stopped

  promtail:
    image: grafana/promtail:3.1.0 # Use a specific stable version
    container_name: promtail
    volumes:
      - ./monitoring/promtail/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro # To discover containers and read logs
      - promtail_data:/var/lib/promtail/positions # To remember log positions
      # Optional: If containers write logs to files instead of stdout
      # - /var/log/pods:/var/log/pods:ro 
    command: -config.file=/etc/promtail/config.yml
    networks:
      - mcp-network
    restart: unless-stopped

  freqtrade_bot_15: # The actual Freqtrade bot instance for MCP 15
    image: freqtradeorg/freqtrade:stable_freqai # Using FreqAI image for future compatibility
    container_name: freqtrade_bot_15
    ports:
      - "${MCP_PORT_FREQTRADE_API:-18080}:8080" # Expose Freqtrade's API on a unique host port
    volumes:
      - ./15_freqtrade_mcp/user_data:/freqtrade/user_data # For strategies, data, logs, etc.
      - ./15_freqtrade_mcp/config_bot.json:/freqtrade/config.json:ro # Bot's own configuration
      - ./secrets/freqtrade_api_password.txt:/run/secrets/freqtrade_api_password_file:ro # Mount the password file
    command: trade --config /freqtrade/config.json --db-url sqlite:////freqtrade/user_data/tradesv3.sqlite --logfile /freqtrade/user_data/logs/freqtrade.log
    environment:
      - TZ=${TZ:-UTC} # Set timezone, defaults to UTC
      # Freqtrade will read its API password from its config.json. 
      # If we want to inject it via an env var that config.json can reference, that's an option too.
      # For now, assuming the password in config_bot.json is used, or the MCP uses a known one.
      # The mcp_user and password from config_bot.json will be used by the MCP service to connect.
      # Override password in config.json if secret file exists
      - FREQTRADE_API_SERVER__PASSWORD__FILE=/run/secrets/freqtrade_api_password_file
    networks:
      - mcp-network
    restart: unless-stopped
    # depends_on: # No direct dependencies for the bot itself other than general Docker runtime

  15_freqtrade_mcp: # The MCP server that controls freqtrade_bot_15
    build:
      context: ./15_freqtrade_mcp
      dockerfile: Dockerfile
    ports:
      - "${MCP_PORT_15:-8015}:8015" # MCP server's own port
    environment:
      - MCP_PORT=8015
      - FREQTRADE_API_URL=http://freqtrade_bot_15:8080 # Internal URL to the bot
      - FREQTRADE_USERNAME=mcp_user # Must match username in config_bot.json
      - FREQTRADE_PASSWORD_SECRET_PATH=/run/secrets/freqtrade_api_password # MCP uses this to auth
      - FREQTRADE_USER_DATA_PATH=/app/user_data # For MCP's CLI tools to access shared user_data
      - FREQTRADE_CONFIG_FILE=/app/config_bot.json # For MCP's CLI tools to access shared config
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=INFO
    volumes:
      - ./15_freqtrade_mcp/user_data:/app/user_data # MCP server has access to user_data
      - ./15_freqtrade_mcp/config_bot.json:/app/config_bot.json:ro # MCP server can read bot's config
      - ./secrets:/secrets:ro # General secrets mount for the MCP server
    secrets:
      - freqtrade_api_password
    networks:
      - mcp-network
    restart: unless-stopped
    depends_on:
      - freqtrade_bot_15 # MCP server depends on the Freqtrade bot

networks:
  mcp-network:
    driver: bridge

# Define Docker secrets here if not managed externally
secrets:
  keepass_master_password:
    file: ./secrets/keepass_master_password.txt # Local file containing the password
  # azure_sp_secret:
  #   file: ./path/to/azure_sp_secret.txt 
  # servicenow_password: # Temporarily comment out until secrets are defined
  #   file: ./secrets/servicenow_password.txt
  freqtrade_api_password:
    file: ./secrets/freqtrade_api_password.txt

# Define persistent volumes for monitoring data
volumes:
  prometheus_data:
  grafana_data:
  loki_data:
  promtail_data: 